#!/usr/bin/env python3
"""JMESPath compliance test runner.
Use: jp-compliance <executable> <test yaml> [<test name>..]

This will run the JMESPath compliance tests against a JMESPath executable.
The executable must accept the query as the only argument, and the input data on stdin.
The result must be printed to stdout as JSON.
Errors must be printed to stderr and match expected values.

If your executable requires additional arguments, wrap it in an executable script.

The test YAML must validate against function_schema.yml or test_schema.yml.

Additionally, test names can be supplied to only execute matching tests
"""
import ruamel.yaml as yaml
import json
import sys
import subprocess
import warnings
from collections import Counter
from ruamel.yaml.error import ReusedAnchorWarning

warnings.simplefilter("ignore", ReusedAnchorWarning)

from json import encoder

class JMESPathEncoder(json.JSONEncoder):
    """Encode data as valid JMESPath expressions"""

    def encode(self, o):
        if isinstance(o, str):
            # o = o.encode('utf-8').decode('unicode_escape')
            pass
        elif isinstance(o, int) or isinstance(o, bool) or isinstance(o, float):
            o = f"`{o}`".lower()
        else:
            o = super().encode(o)

        return o

    def iterencode(self, o, _one_shot=False):
        return encoder._make_iterencode(
            {} if self.check_circular else None, self.default, lambda x: x, self.indent, lambda x: f"`{x}`",
            self.key_separator, self.item_separator, self.sort_keys,
            self.skipkeys, _one_shot, _intstr=lambda x: f"`{x}`")(o, 0)


def main(exe, path, *tests):
    fail_count = 0
    with open(path) as f:
        data = yaml.load(f, yaml.RoundTripLoader)
    func_name = data.get("name")
    data = data.get("examples", data)  # Handle function tests along with grammar tests

    for name, test in data.items():
        if tests and name not in tests:
            continue

        if "args" in test:
            query = f"""{func_name}( {", ".join(json.dumps(arg, cls=JMESPathEncoder) for arg in test["args"])} )"""
        else:
            query = test["query"]
        input = json.dumps(test["context"])
        query = query.encode('utf8', 'surrogatepass')
        p = subprocess.run([exe, query], input=input, capture_output=True, timeout=30, encoding="utf8", errors="surrogatepass")
        stderr = p.stderr.strip().replace("\n", "\\n")

        if "returns" in test:
            if p.returncode:
                print(f"""{path}: {name} Error: {stderr}""")
                fail_count += 1
                continue
            if not p.stdout:
                print(f"""{path}: {name} Empty result""")
                fail_count += 1
                continue
            try:
                result = json.loads(p.stdout)  # Parse output rather than doing string comparison to allow for different key ordering
            except json.JSONDecodeError as e:
                print(f"""{path}: {name} Failed to decode output: {e.msg}""")
                fail_count += 1
                continue
            fail = result != test["returns"]
            if fail and isinstance(result, list) and isinstance(test["returns"], list):
                try:
                    fail = Counter(result) != Counter(test["returns"])
                except TypeError:
                    pass
            if fail:
                print(f"""{path}: {name} failed. Expected '{json.dumps(test["returns"])}' got '{json.dumps(result)}'""")
                fail_count += 1
            else:
                print(f"""{path}: {name} success""")
        else:
            error = test["error"]
            stderrlower = stderr.lower()
            if not all(word in stderrlower for word in error.lower().replace('-', ' ').split()):
                print(f"""{path}: {name} failed. Expected error '{error}' got '{stderr}'""")
                fail_count += 1
            else:
                print(f"""{path}: {name} success""")

    print(f"{fail_count} failed")
    return fail_count


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(__doc__)
        exit(1)
    exit(main(*sys.argv[1:]))
